/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!


goog.provide('proto.ClientQueryRequest');
goog.provide('proto.ClientWrappedMessage');
goog.provide('proto.GameInfo');
goog.provide('proto.GameState');
goog.provide('proto.InvitationToPlayGame');
goog.provide('proto.InvitationToViewGame');
goog.provide('proto.KeyboardKey');
goog.provide('proto.ListenerToClientGamesStates');
goog.provide('proto.ListenerToClientWrappedMessage');
goog.provide('proto.ListenerToClientsWebRTCGamesStates');
goog.provide('proto.ListenerToClientsWebRTCRefuse');
goog.provide('proto.OneChargeInfo');
goog.provide('proto.OneChargeInfo.Charge2DType');
goog.provide('proto.Ping');
goog.provide('proto.PlayGameRequest');
goog.provide('proto.RTCAdmin2ClientOffer');
goog.provide('proto.RTCClient2AdminAnswer');
goog.provide('proto.RTCGameAdminRequest');
goog.provide('proto.RTCGameClientRequest');
goog.provide('proto.ResponceOnGameInvitation');
goog.provide('proto.ResponceOnGameView');
goog.provide('proto.RoomInfo');
goog.provide('proto.RoomInfo.GameStatusEnum');
goog.provide('proto.RoomToClient');
goog.provide('proto.RoomWrappedMessage');
goog.provide('proto.RoomWrappedToClientMessage');
goog.provide('proto.SceneGeometry');
goog.provide('proto.ServerWrappedMessage');
goog.provide('proto.SetLightVelocity');
goog.provide('proto.SetMagneticCalculated');
goog.provide('proto.SetQulon');
goog.provide('proto.ShowPaletteType');
goog.provide('proto.ShowStruct');
goog.provide('proto.StartGame');
goog.provide('proto.ViewGameRequest');
goog.provide('proto.WebRTCAdminToClientMessage');
goog.provide('proto.WebRTCGameInfo');
goog.provide('proto.WebRTCGameRefuseReasons');
goog.provide('proto.WebRTCPlayerStatus');
goog.provide('proto.rtcGameState');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RoomInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RoomInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RoomInfo.displayName = 'proto.RoomInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RoomInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.RoomInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RoomInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RoomInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gamestatus: jspb.Message.getFieldWithDefault(msg, 2, 0),
    roomsize: jspb.Message.getFieldWithDefault(msg, 3, 0),
    waitingsize: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RoomInfo}
 */
proto.RoomInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RoomInfo;
  return proto.RoomInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RoomInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RoomInfo}
 */
proto.RoomInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoomname(value);
      break;
    case 2:
      var value = /** @type {!proto.RoomInfo.GameStatusEnum} */ (reader.readEnum());
      msg.setGamestatus(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomsize(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWaitingsize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RoomInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RoomInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RoomInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RoomInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGamestatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getRoomsize();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getWaitingsize();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.RoomInfo.GameStatusEnum = {
  GSENONE: 0,
  GSEWAITING: 1,
  GSEPLAYING: 2
};

/**
 * optional string roomName = 1;
 * @return {string}
 */
proto.RoomInfo.prototype.getRoomname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.RoomInfo.prototype.setRoomname = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional GameStatusEnum gameStatus = 2;
 * @return {!proto.RoomInfo.GameStatusEnum}
 */
proto.RoomInfo.prototype.getGamestatus = function() {
  return /** @type {!proto.RoomInfo.GameStatusEnum} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.RoomInfo.GameStatusEnum} value */
proto.RoomInfo.prototype.setGamestatus = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int32 roomSize = 3;
 * @return {number}
 */
proto.RoomInfo.prototype.getRoomsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.RoomInfo.prototype.setRoomsize = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 waitingSize = 4;
 * @return {number}
 */
proto.RoomInfo.prototype.getWaitingsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.RoomInfo.prototype.setWaitingsize = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ResponceOnGameInvitation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ResponceOnGameInvitation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ResponceOnGameInvitation.displayName = 'proto.ResponceOnGameInvitation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ResponceOnGameInvitation.prototype.toObject = function(opt_includeInstance) {
  return proto.ResponceOnGameInvitation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ResponceOnGameInvitation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ResponceOnGameInvitation.toObject = function(includeInstance, msg) {
  var f, obj = {
    responce: jspb.Message.getFieldWithDefault(msg, 1, false),
    ticket: jspb.Message.getFieldWithDefault(msg, 2, 0),
    clientip: jspb.Message.getFieldWithDefault(msg, 3, ""),
    clientport: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ResponceOnGameInvitation}
 */
proto.ResponceOnGameInvitation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ResponceOnGameInvitation;
  return proto.ResponceOnGameInvitation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ResponceOnGameInvitation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ResponceOnGameInvitation}
 */
proto.ResponceOnGameInvitation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResponce(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTicket(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientip(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setClientport(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ResponceOnGameInvitation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ResponceOnGameInvitation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ResponceOnGameInvitation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ResponceOnGameInvitation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponce();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getTicket();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getClientip();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getClientport();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional bool responce = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ResponceOnGameInvitation.prototype.getResponce = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.ResponceOnGameInvitation.prototype.setResponce = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int32 ticket = 2;
 * @return {number}
 */
proto.ResponceOnGameInvitation.prototype.getTicket = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ResponceOnGameInvitation.prototype.setTicket = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string clientIp = 3;
 * @return {string}
 */
proto.ResponceOnGameInvitation.prototype.getClientip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.ResponceOnGameInvitation.prototype.setClientip = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 clientPort = 4;
 * @return {number}
 */
proto.ResponceOnGameInvitation.prototype.getClientport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ResponceOnGameInvitation.prototype.setClientport = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ResponceOnGameView = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ResponceOnGameView, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ResponceOnGameView.displayName = 'proto.ResponceOnGameView';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ResponceOnGameView.prototype.toObject = function(opt_includeInstance) {
  return proto.ResponceOnGameView.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ResponceOnGameView} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ResponceOnGameView.toObject = function(includeInstance, msg) {
  var f, obj = {
    responce: jspb.Message.getFieldWithDefault(msg, 1, false),
    ticket: jspb.Message.getFieldWithDefault(msg, 2, 0),
    clientip: jspb.Message.getFieldWithDefault(msg, 3, ""),
    clientport: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ResponceOnGameView}
 */
proto.ResponceOnGameView.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ResponceOnGameView;
  return proto.ResponceOnGameView.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ResponceOnGameView} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ResponceOnGameView}
 */
proto.ResponceOnGameView.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResponce(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTicket(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientip(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setClientport(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ResponceOnGameView.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ResponceOnGameView.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ResponceOnGameView} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ResponceOnGameView.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponce();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getTicket();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getClientip();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getClientport();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional bool responce = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ResponceOnGameView.prototype.getResponce = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.ResponceOnGameView.prototype.setResponce = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int32 ticket = 2;
 * @return {number}
 */
proto.ResponceOnGameView.prototype.getTicket = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ResponceOnGameView.prototype.setTicket = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string clientIp = 3;
 * @return {string}
 */
proto.ResponceOnGameView.prototype.getClientip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.ResponceOnGameView.prototype.setClientip = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 clientPort = 4;
 * @return {number}
 */
proto.ResponceOnGameView.prototype.getClientport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ResponceOnGameView.prototype.setClientport = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StartGame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.StartGame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.StartGame.displayName = 'proto.StartGame';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StartGame.prototype.toObject = function(opt_includeInstance) {
  return proto.StartGame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StartGame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StartGame.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticket: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StartGame}
 */
proto.StartGame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StartGame;
  return proto.StartGame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StartGame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StartGame}
 */
proto.StartGame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTicket(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StartGame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StartGame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StartGame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StartGame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicket();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 ticket = 1;
 * @return {number}
 */
proto.StartGame.prototype.getTicket = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.StartGame.prototype.setTicket = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OneChargeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OneChargeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.OneChargeInfo.displayName = 'proto.OneChargeInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OneChargeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.OneChargeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OneChargeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OneChargeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    m: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    charge: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    x: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    y: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    vx: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    vy: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    fex: +jspb.Message.getFieldWithDefault(msg, 9, 0.0),
    fey: +jspb.Message.getFieldWithDefault(msg, 10, 0.0),
    fbx: +jspb.Message.getFieldWithDefault(msg, 11, 0.0),
    fby: +jspb.Message.getFieldWithDefault(msg, 12, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OneChargeInfo}
 */
proto.OneChargeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OneChargeInfo;
  return proto.OneChargeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OneChargeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OneChargeInfo}
 */
proto.OneChargeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.OneChargeInfo.Charge2DType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setM(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCharge(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVx(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVy(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFex(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFey(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFbx(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFby(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OneChargeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OneChargeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OneChargeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OneChargeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getM();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getCharge();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getVx();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getVy();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getFex();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = message.getFey();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getFbx();
  if (f !== 0.0) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = message.getFby();
  if (f !== 0.0) {
    writer.writeFloat(
      12,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.OneChargeInfo.Charge2DType = {
  CTSTATIC: 0,
  CTDYNAMIC: 1
};

/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.OneChargeInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.OneChargeInfo.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Charge2DType type = 2;
 * @return {!proto.OneChargeInfo.Charge2DType}
 */
proto.OneChargeInfo.prototype.getType = function() {
  return /** @type {!proto.OneChargeInfo.Charge2DType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.OneChargeInfo.Charge2DType} value */
proto.OneChargeInfo.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional float m = 3;
 * @return {number}
 */
proto.OneChargeInfo.prototype.getM = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.OneChargeInfo.prototype.setM = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float charge = 4;
 * @return {number}
 */
proto.OneChargeInfo.prototype.getCharge = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.OneChargeInfo.prototype.setCharge = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float x = 5;
 * @return {number}
 */
proto.OneChargeInfo.prototype.getX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.OneChargeInfo.prototype.setX = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float y = 6;
 * @return {number}
 */
proto.OneChargeInfo.prototype.getY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.OneChargeInfo.prototype.setY = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float vx = 7;
 * @return {number}
 */
proto.OneChargeInfo.prototype.getVx = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.OneChargeInfo.prototype.setVx = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float vy = 8;
 * @return {number}
 */
proto.OneChargeInfo.prototype.getVy = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.OneChargeInfo.prototype.setVy = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional float fex = 9;
 * @return {number}
 */
proto.OneChargeInfo.prototype.getFex = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.OneChargeInfo.prototype.setFex = function(value) {
  jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional float fey = 10;
 * @return {number}
 */
proto.OneChargeInfo.prototype.getFey = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.OneChargeInfo.prototype.setFey = function(value) {
  jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional float fbx = 11;
 * @return {number}
 */
proto.OneChargeInfo.prototype.getFbx = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.OneChargeInfo.prototype.setFbx = function(value) {
  jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional float fby = 12;
 * @return {number}
 */
proto.OneChargeInfo.prototype.getFby = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 12, 0.0));
};


/** @param {number} value */
proto.OneChargeInfo.prototype.setFby = function(value) {
  jspb.Message.setProto3FloatField(this, 12, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ShowStruct = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ShowStruct, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ShowStruct.displayName = 'proto.ShowStruct';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ShowStruct.prototype.toObject = function(opt_includeInstance) {
  return proto.ShowStruct.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ShowStruct} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ShowStruct.toObject = function(includeInstance, msg) {
  var f, obj = {
    palettetype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    palettename: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ShowStruct}
 */
proto.ShowStruct.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ShowStruct;
  return proto.ShowStruct.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ShowStruct} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ShowStruct}
 */
proto.ShowStruct.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ShowPaletteType} */ (reader.readEnum());
      msg.setPalettetype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPalettename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ShowStruct.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ShowStruct.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ShowStruct} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ShowStruct.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPalettetype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPalettename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional ShowPaletteType paletteType = 1;
 * @return {!proto.ShowPaletteType}
 */
proto.ShowStruct.prototype.getPalettetype = function() {
  return /** @type {!proto.ShowPaletteType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.ShowPaletteType} value */
proto.ShowStruct.prototype.setPalettetype = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string paletteName = 2;
 * @return {string}
 */
proto.ShowStruct.prototype.getPalettename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ShowStruct.prototype.setPalettename = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SceneGeometry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SceneGeometry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SceneGeometry.displayName = 'proto.SceneGeometry';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SceneGeometry.prototype.toObject = function(opt_includeInstance) {
  return proto.SceneGeometry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SceneGeometry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SceneGeometry.toObject = function(includeInstance, msg) {
  var f, obj = {
    width: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    height: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    qulon: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    lightvelocity: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    ifmagnetic: jspb.Message.getFieldWithDefault(msg, 5, false),
    forcesshowstruct: (f = msg.getForcesshowstruct()) && proto.ShowStruct.toObject(includeInstance, f),
    eqpotentialsshowstruct: (f = msg.getEqpotentialsshowstruct()) && proto.ShowStruct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SceneGeometry}
 */
proto.SceneGeometry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SceneGeometry;
  return proto.SceneGeometry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SceneGeometry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SceneGeometry}
 */
proto.SceneGeometry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWidth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setQulon(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLightvelocity(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIfmagnetic(value);
      break;
    case 6:
      var value = new proto.ShowStruct;
      reader.readMessage(value,proto.ShowStruct.deserializeBinaryFromReader);
      msg.setForcesshowstruct(value);
      break;
    case 7:
      var value = new proto.ShowStruct;
      reader.readMessage(value,proto.ShowStruct.deserializeBinaryFromReader);
      msg.setEqpotentialsshowstruct(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SceneGeometry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SceneGeometry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SceneGeometry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SceneGeometry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWidth();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getQulon();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getLightvelocity();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getIfmagnetic();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getForcesshowstruct();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.ShowStruct.serializeBinaryToWriter
    );
  }
  f = message.getEqpotentialsshowstruct();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.ShowStruct.serializeBinaryToWriter
    );
  }
};


/**
 * optional float width = 1;
 * @return {number}
 */
proto.SceneGeometry.prototype.getWidth = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.SceneGeometry.prototype.setWidth = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float height = 2;
 * @return {number}
 */
proto.SceneGeometry.prototype.getHeight = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.SceneGeometry.prototype.setHeight = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float qulon = 3;
 * @return {number}
 */
proto.SceneGeometry.prototype.getQulon = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.SceneGeometry.prototype.setQulon = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float lightVelocity = 4;
 * @return {number}
 */
proto.SceneGeometry.prototype.getLightvelocity = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.SceneGeometry.prototype.setLightvelocity = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional bool ifMagnetic = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SceneGeometry.prototype.getIfmagnetic = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.SceneGeometry.prototype.setIfmagnetic = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional ShowStruct forcesShowStruct = 6;
 * @return {?proto.ShowStruct}
 */
proto.SceneGeometry.prototype.getForcesshowstruct = function() {
  return /** @type{?proto.ShowStruct} */ (
    jspb.Message.getWrapperField(this, proto.ShowStruct, 6));
};


/** @param {?proto.ShowStruct|undefined} value */
proto.SceneGeometry.prototype.setForcesshowstruct = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.SceneGeometry.prototype.clearForcesshowstruct = function() {
  this.setForcesshowstruct(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SceneGeometry.prototype.hasForcesshowstruct = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ShowStruct eqPotentialsShowStruct = 7;
 * @return {?proto.ShowStruct}
 */
proto.SceneGeometry.prototype.getEqpotentialsshowstruct = function() {
  return /** @type{?proto.ShowStruct} */ (
    jspb.Message.getWrapperField(this, proto.ShowStruct, 7));
};


/** @param {?proto.ShowStruct|undefined} value */
proto.SceneGeometry.prototype.setEqpotentialsshowstruct = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.SceneGeometry.prototype.clearEqpotentialsshowstruct = function() {
  this.setEqpotentialsshowstruct(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.SceneGeometry.prototype.hasEqpotentialsshowstruct = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RTCGameClientRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RTCGameClientRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RTCGameClientRequest.displayName = 'proto.RTCGameClientRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RTCGameClientRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.RTCGameClientRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RTCGameClientRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RTCGameClientRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RTCGameClientRequest}
 */
proto.RTCGameClientRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RTCGameClientRequest;
  return proto.RTCGameClientRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RTCGameClientRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RTCGameClientRequest}
 */
proto.RTCGameClientRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RTCGameClientRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RTCGameClientRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RTCGameClientRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RTCGameClientRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.RTCGameClientRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.RTCGameClientRequest.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RTCGameAdminRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RTCGameAdminRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RTCGameAdminRequest.displayName = 'proto.RTCGameAdminRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RTCGameAdminRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.RTCGameAdminRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RTCGameAdminRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RTCGameAdminRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gamename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    roomsize: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RTCGameAdminRequest}
 */
proto.RTCGameAdminRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RTCGameAdminRequest;
  return proto.RTCGameAdminRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RTCGameAdminRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RTCGameAdminRequest}
 */
proto.RTCGameAdminRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGamename(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomsize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RTCGameAdminRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RTCGameAdminRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RTCGameAdminRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RTCGameAdminRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGamename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRoomsize();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string gameName = 1;
 * @return {string}
 */
proto.RTCGameAdminRequest.prototype.getGamename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.RTCGameAdminRequest.prototype.setGamename = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 roomSize = 2;
 * @return {number}
 */
proto.RTCGameAdminRequest.prototype.getRoomsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.RTCGameAdminRequest.prototype.setRoomsize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlayGameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PlayGameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PlayGameRequest.displayName = 'proto.PlayGameRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlayGameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PlayGameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlayGameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayGameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ip: jspb.Message.getFieldWithDefault(msg, 1, ""),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlayGameRequest}
 */
proto.PlayGameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlayGameRequest;
  return proto.PlayGameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlayGameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlayGameRequest}
 */
proto.PlayGameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlayGameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlayGameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlayGameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayGameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string ip = 1;
 * @return {string}
 */
proto.PlayGameRequest.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.PlayGameRequest.prototype.setIp = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 port = 2;
 * @return {number}
 */
proto.PlayGameRequest.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.PlayGameRequest.prototype.setPort = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ViewGameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ViewGameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ViewGameRequest.displayName = 'proto.ViewGameRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ViewGameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ViewGameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ViewGameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ViewGameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ip: jspb.Message.getFieldWithDefault(msg, 1, ""),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ViewGameRequest}
 */
proto.ViewGameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ViewGameRequest;
  return proto.ViewGameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ViewGameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ViewGameRequest}
 */
proto.ViewGameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ViewGameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ViewGameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ViewGameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ViewGameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string ip = 1;
 * @return {string}
 */
proto.ViewGameRequest.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ViewGameRequest.prototype.setIp = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 port = 2;
 * @return {number}
 */
proto.ViewGameRequest.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ViewGameRequest.prototype.setPort = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RTCAdmin2ClientOffer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RTCAdmin2ClientOffer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RTCAdmin2ClientOffer.displayName = 'proto.RTCAdmin2ClientOffer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RTCAdmin2ClientOffer.prototype.toObject = function(opt_includeInstance) {
  return proto.RTCAdmin2ClientOffer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RTCAdmin2ClientOffer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RTCAdmin2ClientOffer.toObject = function(includeInstance, msg) {
  var f, obj = {
    gamertcid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    offer: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RTCAdmin2ClientOffer}
 */
proto.RTCAdmin2ClientOffer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RTCAdmin2ClientOffer;
  return proto.RTCAdmin2ClientOffer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RTCAdmin2ClientOffer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RTCAdmin2ClientOffer}
 */
proto.RTCAdmin2ClientOffer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGamertcid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOffer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RTCAdmin2ClientOffer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RTCAdmin2ClientOffer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RTCAdmin2ClientOffer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RTCAdmin2ClientOffer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGamertcid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getOffer();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 gameRTCID = 1;
 * @return {number}
 */
proto.RTCAdmin2ClientOffer.prototype.getGamertcid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.RTCAdmin2ClientOffer.prototype.setGamertcid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string offer = 2;
 * @return {string}
 */
proto.RTCAdmin2ClientOffer.prototype.getOffer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.RTCAdmin2ClientOffer.prototype.setOffer = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RTCClient2AdminAnswer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RTCClient2AdminAnswer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RTCClient2AdminAnswer.displayName = 'proto.RTCClient2AdminAnswer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RTCClient2AdminAnswer.prototype.toObject = function(opt_includeInstance) {
  return proto.RTCClient2AdminAnswer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RTCClient2AdminAnswer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RTCClient2AdminAnswer.toObject = function(includeInstance, msg) {
  var f, obj = {
    gamertcid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    answer: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RTCClient2AdminAnswer}
 */
proto.RTCClient2AdminAnswer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RTCClient2AdminAnswer;
  return proto.RTCClient2AdminAnswer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RTCClient2AdminAnswer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RTCClient2AdminAnswer}
 */
proto.RTCClient2AdminAnswer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGamertcid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnswer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RTCClient2AdminAnswer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RTCClient2AdminAnswer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RTCClient2AdminAnswer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RTCClient2AdminAnswer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGamertcid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getAnswer();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 gameRTCID = 1;
 * @return {number}
 */
proto.RTCClient2AdminAnswer.prototype.getGamertcid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.RTCClient2AdminAnswer.prototype.setGamertcid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string answer = 2;
 * @return {string}
 */
proto.RTCClient2AdminAnswer.prototype.getAnswer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.RTCClient2AdminAnswer.prototype.setAnswer = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientQueryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ClientQueryRequest.oneofGroups_);
};
goog.inherits(proto.ClientQueryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ClientQueryRequest.displayName = 'proto.ClientQueryRequest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ClientQueryRequest.oneofGroups_ = [[1,2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.ClientQueryRequest.MessageCase = {
  MESSAGE_NOT_SET: 0,
  PLAYREQUEST: 1,
  VIEWREQUEST: 2,
  RTCADMINREQUEST: 3,
  RTCCLIENTREQUEST: 4,
  RTCOFFER: 5,
  RTCANSWER: 6
};

/**
 * @return {proto.ClientQueryRequest.MessageCase}
 */
proto.ClientQueryRequest.prototype.getMessageCase = function() {
  return /** @type {proto.ClientQueryRequest.MessageCase} */(jspb.Message.computeOneofCase(this, proto.ClientQueryRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientQueryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientQueryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientQueryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientQueryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    playrequest: (f = msg.getPlayrequest()) && proto.PlayGameRequest.toObject(includeInstance, f),
    viewrequest: (f = msg.getViewrequest()) && proto.ViewGameRequest.toObject(includeInstance, f),
    rtcadminrequest: (f = msg.getRtcadminrequest()) && proto.RTCGameAdminRequest.toObject(includeInstance, f),
    rtcclientrequest: (f = msg.getRtcclientrequest()) && proto.RTCGameClientRequest.toObject(includeInstance, f),
    rtcoffer: (f = msg.getRtcoffer()) && proto.RTCAdmin2ClientOffer.toObject(includeInstance, f),
    rtcanswer: (f = msg.getRtcanswer()) && proto.RTCClient2AdminAnswer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientQueryRequest}
 */
proto.ClientQueryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientQueryRequest;
  return proto.ClientQueryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientQueryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientQueryRequest}
 */
proto.ClientQueryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PlayGameRequest;
      reader.readMessage(value,proto.PlayGameRequest.deserializeBinaryFromReader);
      msg.setPlayrequest(value);
      break;
    case 2:
      var value = new proto.ViewGameRequest;
      reader.readMessage(value,proto.ViewGameRequest.deserializeBinaryFromReader);
      msg.setViewrequest(value);
      break;
    case 3:
      var value = new proto.RTCGameAdminRequest;
      reader.readMessage(value,proto.RTCGameAdminRequest.deserializeBinaryFromReader);
      msg.setRtcadminrequest(value);
      break;
    case 4:
      var value = new proto.RTCGameClientRequest;
      reader.readMessage(value,proto.RTCGameClientRequest.deserializeBinaryFromReader);
      msg.setRtcclientrequest(value);
      break;
    case 5:
      var value = new proto.RTCAdmin2ClientOffer;
      reader.readMessage(value,proto.RTCAdmin2ClientOffer.deserializeBinaryFromReader);
      msg.setRtcoffer(value);
      break;
    case 6:
      var value = new proto.RTCClient2AdminAnswer;
      reader.readMessage(value,proto.RTCClient2AdminAnswer.deserializeBinaryFromReader);
      msg.setRtcanswer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientQueryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientQueryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientQueryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientQueryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayrequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PlayGameRequest.serializeBinaryToWriter
    );
  }
  f = message.getViewrequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ViewGameRequest.serializeBinaryToWriter
    );
  }
  f = message.getRtcadminrequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.RTCGameAdminRequest.serializeBinaryToWriter
    );
  }
  f = message.getRtcclientrequest();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.RTCGameClientRequest.serializeBinaryToWriter
    );
  }
  f = message.getRtcoffer();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.RTCAdmin2ClientOffer.serializeBinaryToWriter
    );
  }
  f = message.getRtcanswer();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.RTCClient2AdminAnswer.serializeBinaryToWriter
    );
  }
};


/**
 * optional PlayGameRequest playRequest = 1;
 * @return {?proto.PlayGameRequest}
 */
proto.ClientQueryRequest.prototype.getPlayrequest = function() {
  return /** @type{?proto.PlayGameRequest} */ (
    jspb.Message.getWrapperField(this, proto.PlayGameRequest, 1));
};


/** @param {?proto.PlayGameRequest|undefined} value */
proto.ClientQueryRequest.prototype.setPlayrequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.ClientQueryRequest.oneofGroups_[0], value);
};


proto.ClientQueryRequest.prototype.clearPlayrequest = function() {
  this.setPlayrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientQueryRequest.prototype.hasPlayrequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ViewGameRequest viewRequest = 2;
 * @return {?proto.ViewGameRequest}
 */
proto.ClientQueryRequest.prototype.getViewrequest = function() {
  return /** @type{?proto.ViewGameRequest} */ (
    jspb.Message.getWrapperField(this, proto.ViewGameRequest, 2));
};


/** @param {?proto.ViewGameRequest|undefined} value */
proto.ClientQueryRequest.prototype.setViewrequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.ClientQueryRequest.oneofGroups_[0], value);
};


proto.ClientQueryRequest.prototype.clearViewrequest = function() {
  this.setViewrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientQueryRequest.prototype.hasViewrequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RTCGameAdminRequest rtcAdminRequest = 3;
 * @return {?proto.RTCGameAdminRequest}
 */
proto.ClientQueryRequest.prototype.getRtcadminrequest = function() {
  return /** @type{?proto.RTCGameAdminRequest} */ (
    jspb.Message.getWrapperField(this, proto.RTCGameAdminRequest, 3));
};


/** @param {?proto.RTCGameAdminRequest|undefined} value */
proto.ClientQueryRequest.prototype.setRtcadminrequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.ClientQueryRequest.oneofGroups_[0], value);
};


proto.ClientQueryRequest.prototype.clearRtcadminrequest = function() {
  this.setRtcadminrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientQueryRequest.prototype.hasRtcadminrequest = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RTCGameClientRequest rtcClientRequest = 4;
 * @return {?proto.RTCGameClientRequest}
 */
proto.ClientQueryRequest.prototype.getRtcclientrequest = function() {
  return /** @type{?proto.RTCGameClientRequest} */ (
    jspb.Message.getWrapperField(this, proto.RTCGameClientRequest, 4));
};


/** @param {?proto.RTCGameClientRequest|undefined} value */
proto.ClientQueryRequest.prototype.setRtcclientrequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.ClientQueryRequest.oneofGroups_[0], value);
};


proto.ClientQueryRequest.prototype.clearRtcclientrequest = function() {
  this.setRtcclientrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientQueryRequest.prototype.hasRtcclientrequest = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional RTCAdmin2ClientOffer rtcOffer = 5;
 * @return {?proto.RTCAdmin2ClientOffer}
 */
proto.ClientQueryRequest.prototype.getRtcoffer = function() {
  return /** @type{?proto.RTCAdmin2ClientOffer} */ (
    jspb.Message.getWrapperField(this, proto.RTCAdmin2ClientOffer, 5));
};


/** @param {?proto.RTCAdmin2ClientOffer|undefined} value */
proto.ClientQueryRequest.prototype.setRtcoffer = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.ClientQueryRequest.oneofGroups_[0], value);
};


proto.ClientQueryRequest.prototype.clearRtcoffer = function() {
  this.setRtcoffer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientQueryRequest.prototype.hasRtcoffer = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional RTCClient2AdminAnswer rtcAnswer = 6;
 * @return {?proto.RTCClient2AdminAnswer}
 */
proto.ClientQueryRequest.prototype.getRtcanswer = function() {
  return /** @type{?proto.RTCClient2AdminAnswer} */ (
    jspb.Message.getWrapperField(this, proto.RTCClient2AdminAnswer, 6));
};


/** @param {?proto.RTCClient2AdminAnswer|undefined} value */
proto.ClientQueryRequest.prototype.setRtcanswer = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.ClientQueryRequest.oneofGroups_[0], value);
};


proto.ClientQueryRequest.prototype.clearRtcanswer = function() {
  this.setRtcanswer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientQueryRequest.prototype.hasRtcanswer = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RoomToClient = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.RoomToClient.repeatedFields_, null);
};
goog.inherits(proto.RoomToClient, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RoomToClient.displayName = 'proto.RoomToClient';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.RoomToClient.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RoomToClient.prototype.toObject = function(opt_includeInstance) {
  return proto.RoomToClient.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RoomToClient} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RoomToClient.toObject = function(includeInstance, msg) {
  var f, obj = {
    packetid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    chargeinfoList: jspb.Message.toObjectList(msg.getChargeinfoList(),
    proto.OneChargeInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RoomToClient}
 */
proto.RoomToClient.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RoomToClient;
  return proto.RoomToClient.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RoomToClient} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RoomToClient}
 */
proto.RoomToClient.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPacketid(value);
      break;
    case 2:
      var value = new proto.OneChargeInfo;
      reader.readMessage(value,proto.OneChargeInfo.deserializeBinaryFromReader);
      msg.addChargeinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RoomToClient.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RoomToClient.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RoomToClient} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RoomToClient.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPacketid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getChargeinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.OneChargeInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 packetId = 1;
 * @return {number}
 */
proto.RoomToClient.prototype.getPacketid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.RoomToClient.prototype.setPacketid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated OneChargeInfo chargeInfo = 2;
 * @return {!Array<!proto.OneChargeInfo>}
 */
proto.RoomToClient.prototype.getChargeinfoList = function() {
  return /** @type{!Array<!proto.OneChargeInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.OneChargeInfo, 2));
};


/** @param {!Array<!proto.OneChargeInfo>} value */
proto.RoomToClient.prototype.setChargeinfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.OneChargeInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.OneChargeInfo}
 */
proto.RoomToClient.prototype.addChargeinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.OneChargeInfo, opt_index);
};


proto.RoomToClient.prototype.clearChargeinfoList = function() {
  this.setChargeinfoList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameState.displayName = 'proto.GameState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameState.prototype.toObject = function(opt_includeInstance) {
  return proto.GameState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameState.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomport: jspb.Message.getFieldWithDefault(msg, 1, 0),
    roominfo: (f = msg.getRoominfo()) && proto.RoomInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameState}
 */
proto.GameState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameState;
  return proto.GameState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameState}
 */
proto.GameState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomport(value);
      break;
    case 2:
      var value = new proto.RoomInfo;
      reader.readMessage(value,proto.RoomInfo.deserializeBinaryFromReader);
      msg.setRoominfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomport();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRoominfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.RoomInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 roomPort = 1;
 * @return {number}
 */
proto.GameState.prototype.getRoomport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.GameState.prototype.setRoomport = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional RoomInfo roomInfo = 2;
 * @return {?proto.RoomInfo}
 */
proto.GameState.prototype.getRoominfo = function() {
  return /** @type{?proto.RoomInfo} */ (
    jspb.Message.getWrapperField(this, proto.RoomInfo, 2));
};


/** @param {?proto.RoomInfo|undefined} value */
proto.GameState.prototype.setRoominfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.GameState.prototype.clearRoominfo = function() {
  this.setRoominfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameState.prototype.hasRoominfo = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameInfo.displayName = 'proto.GameInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.GameInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    geometry: (f = msg.getGeometry()) && proto.SceneGeometry.toObject(includeInstance, f),
    currentchargeid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameInfo}
 */
proto.GameInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameInfo;
  return proto.GameInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameInfo}
 */
proto.GameInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SceneGeometry;
      reader.readMessage(value,proto.SceneGeometry.deserializeBinaryFromReader);
      msg.setGeometry(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrentchargeid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGeometry();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SceneGeometry.serializeBinaryToWriter
    );
  }
  f = message.getCurrentchargeid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional SceneGeometry geometry = 1;
 * @return {?proto.SceneGeometry}
 */
proto.GameInfo.prototype.getGeometry = function() {
  return /** @type{?proto.SceneGeometry} */ (
    jspb.Message.getWrapperField(this, proto.SceneGeometry, 1));
};


/** @param {?proto.SceneGeometry|undefined} value */
proto.GameInfo.prototype.setGeometry = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.GameInfo.prototype.clearGeometry = function() {
  this.setGeometry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameInfo.prototype.hasGeometry = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 currentChargeId = 2;
 * @return {number}
 */
proto.GameInfo.prototype.getCurrentchargeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GameInfo.prototype.setCurrentchargeid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RoomWrappedToClientMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.RoomWrappedToClientMessage.oneofGroups_);
};
goog.inherits(proto.RoomWrappedToClientMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RoomWrappedToClientMessage.displayName = 'proto.RoomWrappedToClientMessage';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.RoomWrappedToClientMessage.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.RoomWrappedToClientMessage.MessageCase = {
  MESSAGE_NOT_SET: 0,
  ROOMTOCLIENT: 1,
  GAMEINFO: 2
};

/**
 * @return {proto.RoomWrappedToClientMessage.MessageCase}
 */
proto.RoomWrappedToClientMessage.prototype.getMessageCase = function() {
  return /** @type {proto.RoomWrappedToClientMessage.MessageCase} */(jspb.Message.computeOneofCase(this, proto.RoomWrappedToClientMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RoomWrappedToClientMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.RoomWrappedToClientMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RoomWrappedToClientMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RoomWrappedToClientMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    roomtoclient: (f = msg.getRoomtoclient()) && proto.RoomToClient.toObject(includeInstance, f),
    gameinfo: (f = msg.getGameinfo()) && proto.GameInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RoomWrappedToClientMessage}
 */
proto.RoomWrappedToClientMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RoomWrappedToClientMessage;
  return proto.RoomWrappedToClientMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RoomWrappedToClientMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RoomWrappedToClientMessage}
 */
proto.RoomWrappedToClientMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RoomToClient;
      reader.readMessage(value,proto.RoomToClient.deserializeBinaryFromReader);
      msg.setRoomtoclient(value);
      break;
    case 2:
      var value = new proto.GameInfo;
      reader.readMessage(value,proto.GameInfo.deserializeBinaryFromReader);
      msg.setGameinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RoomWrappedToClientMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RoomWrappedToClientMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RoomWrappedToClientMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RoomWrappedToClientMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoomtoclient();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RoomToClient.serializeBinaryToWriter
    );
  }
  f = message.getGameinfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.GameInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional RoomToClient roomToClient = 1;
 * @return {?proto.RoomToClient}
 */
proto.RoomWrappedToClientMessage.prototype.getRoomtoclient = function() {
  return /** @type{?proto.RoomToClient} */ (
    jspb.Message.getWrapperField(this, proto.RoomToClient, 1));
};


/** @param {?proto.RoomToClient|undefined} value */
proto.RoomWrappedToClientMessage.prototype.setRoomtoclient = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.RoomWrappedToClientMessage.oneofGroups_[0], value);
};


proto.RoomWrappedToClientMessage.prototype.clearRoomtoclient = function() {
  this.setRoomtoclient(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RoomWrappedToClientMessage.prototype.hasRoomtoclient = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GameInfo gameInfo = 2;
 * @return {?proto.GameInfo}
 */
proto.RoomWrappedToClientMessage.prototype.getGameinfo = function() {
  return /** @type{?proto.GameInfo} */ (
    jspb.Message.getWrapperField(this, proto.GameInfo, 2));
};


/** @param {?proto.GameInfo|undefined} value */
proto.RoomWrappedToClientMessage.prototype.setGameinfo = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.RoomWrappedToClientMessage.oneofGroups_[0], value);
};


proto.RoomWrappedToClientMessage.prototype.clearGameinfo = function() {
  this.setGameinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RoomWrappedToClientMessage.prototype.hasGameinfo = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WebRTCGameInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.WebRTCGameInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WebRTCGameInfo.displayName = 'proto.WebRTCGameInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WebRTCGameInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.WebRTCGameInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WebRTCGameInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebRTCGameInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gameid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    forcepalette: jspb.Message.getFieldWithDefault(msg, 3, ""),
    eqpotpalette: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WebRTCGameInfo}
 */
proto.WebRTCGameInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WebRTCGameInfo;
  return proto.WebRTCGameInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WebRTCGameInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WebRTCGameInfo}
 */
proto.WebRTCGameInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGameid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setForcepalette(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEqpotpalette(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WebRTCGameInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WebRTCGameInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WebRTCGameInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebRTCGameInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGameid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getForcepalette();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEqpotpalette();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.WebRTCGameInfo.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.WebRTCGameInfo.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 gameid = 2;
 * @return {number}
 */
proto.WebRTCGameInfo.prototype.getGameid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.WebRTCGameInfo.prototype.setGameid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string forcePalette = 3;
 * @return {string}
 */
proto.WebRTCGameInfo.prototype.getForcepalette = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.WebRTCGameInfo.prototype.setForcepalette = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string eqPotPalette = 4;
 * @return {string}
 */
proto.WebRTCGameInfo.prototype.getEqpotpalette = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.WebRTCGameInfo.prototype.setEqpotpalette = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WebRTCAdminToClientMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.WebRTCAdminToClientMessage.oneofGroups_);
};
goog.inherits(proto.WebRTCAdminToClientMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.WebRTCAdminToClientMessage.displayName = 'proto.WebRTCAdminToClientMessage';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.WebRTCAdminToClientMessage.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.WebRTCAdminToClientMessage.MessageCase = {
  MESSAGE_NOT_SET: 0,
  RTCGAMEINFO: 1
};

/**
 * @return {proto.WebRTCAdminToClientMessage.MessageCase}
 */
proto.WebRTCAdminToClientMessage.prototype.getMessageCase = function() {
  return /** @type {proto.WebRTCAdminToClientMessage.MessageCase} */(jspb.Message.computeOneofCase(this, proto.WebRTCAdminToClientMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WebRTCAdminToClientMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.WebRTCAdminToClientMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WebRTCAdminToClientMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebRTCAdminToClientMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    rtcgameinfo: (f = msg.getRtcgameinfo()) && proto.WebRTCGameInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WebRTCAdminToClientMessage}
 */
proto.WebRTCAdminToClientMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WebRTCAdminToClientMessage;
  return proto.WebRTCAdminToClientMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WebRTCAdminToClientMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WebRTCAdminToClientMessage}
 */
proto.WebRTCAdminToClientMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.WebRTCGameInfo;
      reader.readMessage(value,proto.WebRTCGameInfo.deserializeBinaryFromReader);
      msg.setRtcgameinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WebRTCAdminToClientMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WebRTCAdminToClientMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WebRTCAdminToClientMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WebRTCAdminToClientMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRtcgameinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.WebRTCGameInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional WebRTCGameInfo rtcGameInfo = 1;
 * @return {?proto.WebRTCGameInfo}
 */
proto.WebRTCAdminToClientMessage.prototype.getRtcgameinfo = function() {
  return /** @type{?proto.WebRTCGameInfo} */ (
    jspb.Message.getWrapperField(this, proto.WebRTCGameInfo, 1));
};


/** @param {?proto.WebRTCGameInfo|undefined} value */
proto.WebRTCAdminToClientMessage.prototype.setRtcgameinfo = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.WebRTCAdminToClientMessage.oneofGroups_[0], value);
};


proto.WebRTCAdminToClientMessage.prototype.clearRtcgameinfo = function() {
  this.setRtcgameinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.WebRTCAdminToClientMessage.prototype.hasRtcgameinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RoomWrappedMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.RoomWrappedMessage.oneofGroups_);
};
goog.inherits(proto.RoomWrappedMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RoomWrappedMessage.displayName = 'proto.RoomWrappedMessage';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.RoomWrappedMessage.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.RoomWrappedMessage.MessageCase = {
  MESSAGE_NOT_SET: 0,
  ROOMINFO: 1,
  RESPONCEINVITATION: 2,
  RESPONCEVIEW: 3,
  STARTGAME: 4
};

/**
 * @return {proto.RoomWrappedMessage.MessageCase}
 */
proto.RoomWrappedMessage.prototype.getMessageCase = function() {
  return /** @type {proto.RoomWrappedMessage.MessageCase} */(jspb.Message.computeOneofCase(this, proto.RoomWrappedMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RoomWrappedMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.RoomWrappedMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RoomWrappedMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RoomWrappedMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    roominfo: (f = msg.getRoominfo()) && proto.RoomInfo.toObject(includeInstance, f),
    responceinvitation: (f = msg.getResponceinvitation()) && proto.ResponceOnGameInvitation.toObject(includeInstance, f),
    responceview: (f = msg.getResponceview()) && proto.ResponceOnGameView.toObject(includeInstance, f),
    startgame: (f = msg.getStartgame()) && proto.StartGame.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RoomWrappedMessage}
 */
proto.RoomWrappedMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RoomWrappedMessage;
  return proto.RoomWrappedMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RoomWrappedMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RoomWrappedMessage}
 */
proto.RoomWrappedMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.RoomInfo;
      reader.readMessage(value,proto.RoomInfo.deserializeBinaryFromReader);
      msg.setRoominfo(value);
      break;
    case 2:
      var value = new proto.ResponceOnGameInvitation;
      reader.readMessage(value,proto.ResponceOnGameInvitation.deserializeBinaryFromReader);
      msg.setResponceinvitation(value);
      break;
    case 3:
      var value = new proto.ResponceOnGameView;
      reader.readMessage(value,proto.ResponceOnGameView.deserializeBinaryFromReader);
      msg.setResponceview(value);
      break;
    case 4:
      var value = new proto.StartGame;
      reader.readMessage(value,proto.StartGame.deserializeBinaryFromReader);
      msg.setStartgame(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RoomWrappedMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RoomWrappedMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RoomWrappedMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RoomWrappedMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoominfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.RoomInfo.serializeBinaryToWriter
    );
  }
  f = message.getResponceinvitation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ResponceOnGameInvitation.serializeBinaryToWriter
    );
  }
  f = message.getResponceview();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ResponceOnGameView.serializeBinaryToWriter
    );
  }
  f = message.getStartgame();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.StartGame.serializeBinaryToWriter
    );
  }
};


/**
 * optional RoomInfo roomInfo = 1;
 * @return {?proto.RoomInfo}
 */
proto.RoomWrappedMessage.prototype.getRoominfo = function() {
  return /** @type{?proto.RoomInfo} */ (
    jspb.Message.getWrapperField(this, proto.RoomInfo, 1));
};


/** @param {?proto.RoomInfo|undefined} value */
proto.RoomWrappedMessage.prototype.setRoominfo = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.RoomWrappedMessage.oneofGroups_[0], value);
};


proto.RoomWrappedMessage.prototype.clearRoominfo = function() {
  this.setRoominfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RoomWrappedMessage.prototype.hasRoominfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ResponceOnGameInvitation responceInvitation = 2;
 * @return {?proto.ResponceOnGameInvitation}
 */
proto.RoomWrappedMessage.prototype.getResponceinvitation = function() {
  return /** @type{?proto.ResponceOnGameInvitation} */ (
    jspb.Message.getWrapperField(this, proto.ResponceOnGameInvitation, 2));
};


/** @param {?proto.ResponceOnGameInvitation|undefined} value */
proto.RoomWrappedMessage.prototype.setResponceinvitation = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.RoomWrappedMessage.oneofGroups_[0], value);
};


proto.RoomWrappedMessage.prototype.clearResponceinvitation = function() {
  this.setResponceinvitation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RoomWrappedMessage.prototype.hasResponceinvitation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ResponceOnGameView responceView = 3;
 * @return {?proto.ResponceOnGameView}
 */
proto.RoomWrappedMessage.prototype.getResponceview = function() {
  return /** @type{?proto.ResponceOnGameView} */ (
    jspb.Message.getWrapperField(this, proto.ResponceOnGameView, 3));
};


/** @param {?proto.ResponceOnGameView|undefined} value */
proto.RoomWrappedMessage.prototype.setResponceview = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.RoomWrappedMessage.oneofGroups_[0], value);
};


proto.RoomWrappedMessage.prototype.clearResponceview = function() {
  this.setResponceview(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RoomWrappedMessage.prototype.hasResponceview = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional StartGame startGame = 4;
 * @return {?proto.StartGame}
 */
proto.RoomWrappedMessage.prototype.getStartgame = function() {
  return /** @type{?proto.StartGame} */ (
    jspb.Message.getWrapperField(this, proto.StartGame, 4));
};


/** @param {?proto.StartGame|undefined} value */
proto.RoomWrappedMessage.prototype.setStartgame = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.RoomWrappedMessage.oneofGroups_[0], value);
};


proto.RoomWrappedMessage.prototype.clearStartgame = function() {
  this.setStartgame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RoomWrappedMessage.prototype.hasStartgame = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.InvitationToPlayGame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.InvitationToPlayGame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.InvitationToPlayGame.displayName = 'proto.InvitationToPlayGame';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.InvitationToPlayGame.prototype.toObject = function(opt_includeInstance) {
  return proto.InvitationToPlayGame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.InvitationToPlayGame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InvitationToPlayGame.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientport: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientip: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ticket: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.InvitationToPlayGame}
 */
proto.InvitationToPlayGame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.InvitationToPlayGame;
  return proto.InvitationToPlayGame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.InvitationToPlayGame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.InvitationToPlayGame}
 */
proto.InvitationToPlayGame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setClientport(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientip(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTicket(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.InvitationToPlayGame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.InvitationToPlayGame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.InvitationToPlayGame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InvitationToPlayGame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientport();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getClientip();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTicket();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 clientPort = 1;
 * @return {number}
 */
proto.InvitationToPlayGame.prototype.getClientport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.InvitationToPlayGame.prototype.setClientport = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string clientIp = 2;
 * @return {string}
 */
proto.InvitationToPlayGame.prototype.getClientip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.InvitationToPlayGame.prototype.setClientip = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 ticket = 3;
 * @return {number}
 */
proto.InvitationToPlayGame.prototype.getTicket = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.InvitationToPlayGame.prototype.setTicket = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.InvitationToViewGame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.InvitationToViewGame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.InvitationToViewGame.displayName = 'proto.InvitationToViewGame';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.InvitationToViewGame.prototype.toObject = function(opt_includeInstance) {
  return proto.InvitationToViewGame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.InvitationToViewGame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InvitationToViewGame.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientport: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientip: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ticket: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.InvitationToViewGame}
 */
proto.InvitationToViewGame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.InvitationToViewGame;
  return proto.InvitationToViewGame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.InvitationToViewGame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.InvitationToViewGame}
 */
proto.InvitationToViewGame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setClientport(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientip(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTicket(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.InvitationToViewGame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.InvitationToViewGame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.InvitationToViewGame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InvitationToViewGame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientport();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getClientip();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTicket();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 clientPort = 1;
 * @return {number}
 */
proto.InvitationToViewGame.prototype.getClientport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.InvitationToViewGame.prototype.setClientport = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string clientIp = 2;
 * @return {string}
 */
proto.InvitationToViewGame.prototype.getClientip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.InvitationToViewGame.prototype.setClientip = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 ticket = 3;
 * @return {number}
 */
proto.InvitationToViewGame.prototype.getTicket = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.InvitationToViewGame.prototype.setTicket = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ListenerToClientGamesStates = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ListenerToClientGamesStates.repeatedFields_, null);
};
goog.inherits(proto.ListenerToClientGamesStates, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ListenerToClientGamesStates.displayName = 'proto.ListenerToClientGamesStates';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ListenerToClientGamesStates.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ListenerToClientGamesStates.prototype.toObject = function(opt_includeInstance) {
  return proto.ListenerToClientGamesStates.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ListenerToClientGamesStates} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListenerToClientGamesStates.toObject = function(includeInstance, msg) {
  var f, obj = {
    gamestateList: jspb.Message.toObjectList(msg.getGamestateList(),
    proto.GameState.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ListenerToClientGamesStates}
 */
proto.ListenerToClientGamesStates.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ListenerToClientGamesStates;
  return proto.ListenerToClientGamesStates.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ListenerToClientGamesStates} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ListenerToClientGamesStates}
 */
proto.ListenerToClientGamesStates.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.GameState;
      reader.readMessage(value,proto.GameState.deserializeBinaryFromReader);
      msg.addGamestate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ListenerToClientGamesStates.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ListenerToClientGamesStates.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ListenerToClientGamesStates} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListenerToClientGamesStates.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGamestateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.GameState.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GameState gameState = 1;
 * @return {!Array<!proto.GameState>}
 */
proto.ListenerToClientGamesStates.prototype.getGamestateList = function() {
  return /** @type{!Array<!proto.GameState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.GameState, 1));
};


/** @param {!Array<!proto.GameState>} value */
proto.ListenerToClientGamesStates.prototype.setGamestateList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.GameState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.GameState}
 */
proto.ListenerToClientGamesStates.prototype.addGamestate = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.GameState, opt_index);
};


proto.ListenerToClientGamesStates.prototype.clearGamestateList = function() {
  this.setGamestateList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rtcGameState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rtcGameState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.rtcGameState.displayName = 'proto.rtcGameState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rtcGameState.prototype.toObject = function(opt_includeInstance) {
  return proto.rtcGameState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rtcGameState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtcGameState.toObject = function(includeInstance, msg) {
  var f, obj = {
    gamertcid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    gamename: jspb.Message.getFieldWithDefault(msg, 2, ""),
    roomsize: jspb.Message.getFieldWithDefault(msg, 3, 0),
    currentplayerscount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    playerstatus: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rtcGameState}
 */
proto.rtcGameState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rtcGameState;
  return proto.rtcGameState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rtcGameState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rtcGameState}
 */
proto.rtcGameState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGamertcid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGamename(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRoomsize(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrentplayerscount(value);
      break;
    case 5:
      var value = /** @type {!proto.WebRTCPlayerStatus} */ (reader.readEnum());
      msg.setPlayerstatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rtcGameState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rtcGameState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rtcGameState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rtcGameState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGamertcid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getGamename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRoomsize();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getCurrentplayerscount();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getPlayerstatus();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional int32 gameRTCID = 1;
 * @return {number}
 */
proto.rtcGameState.prototype.getGamertcid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.rtcGameState.prototype.setGamertcid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string gameName = 2;
 * @return {string}
 */
proto.rtcGameState.prototype.getGamename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.rtcGameState.prototype.setGamename = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 roomSize = 3;
 * @return {number}
 */
proto.rtcGameState.prototype.getRoomsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.rtcGameState.prototype.setRoomsize = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 currentPlayersCount = 4;
 * @return {number}
 */
proto.rtcGameState.prototype.getCurrentplayerscount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.rtcGameState.prototype.setCurrentplayerscount = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional WebRTCPlayerStatus playerStatus = 5;
 * @return {!proto.WebRTCPlayerStatus}
 */
proto.rtcGameState.prototype.getPlayerstatus = function() {
  return /** @type {!proto.WebRTCPlayerStatus} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.WebRTCPlayerStatus} value */
proto.rtcGameState.prototype.setPlayerstatus = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ListenerToClientsWebRTCGamesStates = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ListenerToClientsWebRTCGamesStates.repeatedFields_, null);
};
goog.inherits(proto.ListenerToClientsWebRTCGamesStates, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ListenerToClientsWebRTCGamesStates.displayName = 'proto.ListenerToClientsWebRTCGamesStates';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ListenerToClientsWebRTCGamesStates.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ListenerToClientsWebRTCGamesStates.prototype.toObject = function(opt_includeInstance) {
  return proto.ListenerToClientsWebRTCGamesStates.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ListenerToClientsWebRTCGamesStates} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListenerToClientsWebRTCGamesStates.toObject = function(includeInstance, msg) {
  var f, obj = {
    rtcstateList: jspb.Message.toObjectList(msg.getRtcstateList(),
    proto.rtcGameState.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ListenerToClientsWebRTCGamesStates}
 */
proto.ListenerToClientsWebRTCGamesStates.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ListenerToClientsWebRTCGamesStates;
  return proto.ListenerToClientsWebRTCGamesStates.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ListenerToClientsWebRTCGamesStates} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ListenerToClientsWebRTCGamesStates}
 */
proto.ListenerToClientsWebRTCGamesStates.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.rtcGameState;
      reader.readMessage(value,proto.rtcGameState.deserializeBinaryFromReader);
      msg.addRtcstate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ListenerToClientsWebRTCGamesStates.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ListenerToClientsWebRTCGamesStates.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ListenerToClientsWebRTCGamesStates} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListenerToClientsWebRTCGamesStates.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRtcstateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.rtcGameState.serializeBinaryToWriter
    );
  }
};


/**
 * repeated rtcGameState rtcState = 1;
 * @return {!Array<!proto.rtcGameState>}
 */
proto.ListenerToClientsWebRTCGamesStates.prototype.getRtcstateList = function() {
  return /** @type{!Array<!proto.rtcGameState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rtcGameState, 1));
};


/** @param {!Array<!proto.rtcGameState>} value */
proto.ListenerToClientsWebRTCGamesStates.prototype.setRtcstateList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.rtcGameState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rtcGameState}
 */
proto.ListenerToClientsWebRTCGamesStates.prototype.addRtcstate = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.rtcGameState, opt_index);
};


proto.ListenerToClientsWebRTCGamesStates.prototype.clearRtcstateList = function() {
  this.setRtcstateList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ListenerToClientsWebRTCRefuse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ListenerToClientsWebRTCRefuse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ListenerToClientsWebRTCRefuse.displayName = 'proto.ListenerToClientsWebRTCRefuse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ListenerToClientsWebRTCRefuse.prototype.toObject = function(opt_includeInstance) {
  return proto.ListenerToClientsWebRTCRefuse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ListenerToClientsWebRTCRefuse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListenerToClientsWebRTCRefuse.toObject = function(includeInstance, msg) {
  var f, obj = {
    gamertcid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    refusereason: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ListenerToClientsWebRTCRefuse}
 */
proto.ListenerToClientsWebRTCRefuse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ListenerToClientsWebRTCRefuse;
  return proto.ListenerToClientsWebRTCRefuse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ListenerToClientsWebRTCRefuse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ListenerToClientsWebRTCRefuse}
 */
proto.ListenerToClientsWebRTCRefuse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGamertcid(value);
      break;
    case 2:
      var value = /** @type {!proto.WebRTCGameRefuseReasons} */ (reader.readEnum());
      msg.setRefusereason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ListenerToClientsWebRTCRefuse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ListenerToClientsWebRTCRefuse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ListenerToClientsWebRTCRefuse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListenerToClientsWebRTCRefuse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGamertcid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getRefusereason();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional int32 gameRTCID = 1;
 * @return {number}
 */
proto.ListenerToClientsWebRTCRefuse.prototype.getGamertcid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ListenerToClientsWebRTCRefuse.prototype.setGamertcid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional WebRTCGameRefuseReasons refuseReason = 2;
 * @return {!proto.WebRTCGameRefuseReasons}
 */
proto.ListenerToClientsWebRTCRefuse.prototype.getRefusereason = function() {
  return /** @type {!proto.WebRTCGameRefuseReasons} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.WebRTCGameRefuseReasons} value */
proto.ListenerToClientsWebRTCRefuse.prototype.setRefusereason = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ListenerToClientWrappedMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ListenerToClientWrappedMessage.oneofGroups_);
};
goog.inherits(proto.ListenerToClientWrappedMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ListenerToClientWrappedMessage.displayName = 'proto.ListenerToClientWrappedMessage';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ListenerToClientWrappedMessage.oneofGroups_ = [[1,2,3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.ListenerToClientWrappedMessage.MessageCase = {
  MESSAGE_NOT_SET: 0,
  INVITATIONTOPLAY: 1,
  STATES: 2,
  INVITATIONTOVIEW: 3,
  RTCSTATES: 4,
  RTCREFUSE: 5,
  RTCOFFER: 6,
  RTCANSWER: 7
};

/**
 * @return {proto.ListenerToClientWrappedMessage.MessageCase}
 */
proto.ListenerToClientWrappedMessage.prototype.getMessageCase = function() {
  return /** @type {proto.ListenerToClientWrappedMessage.MessageCase} */(jspb.Message.computeOneofCase(this, proto.ListenerToClientWrappedMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ListenerToClientWrappedMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.ListenerToClientWrappedMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ListenerToClientWrappedMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListenerToClientWrappedMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    invitationtoplay: (f = msg.getInvitationtoplay()) && proto.InvitationToPlayGame.toObject(includeInstance, f),
    states: (f = msg.getStates()) && proto.ListenerToClientGamesStates.toObject(includeInstance, f),
    invitationtoview: (f = msg.getInvitationtoview()) && proto.InvitationToViewGame.toObject(includeInstance, f),
    rtcstates: (f = msg.getRtcstates()) && proto.ListenerToClientsWebRTCGamesStates.toObject(includeInstance, f),
    rtcrefuse: (f = msg.getRtcrefuse()) && proto.ListenerToClientsWebRTCRefuse.toObject(includeInstance, f),
    rtcoffer: (f = msg.getRtcoffer()) && proto.RTCAdmin2ClientOffer.toObject(includeInstance, f),
    rtcanswer: (f = msg.getRtcanswer()) && proto.RTCClient2AdminAnswer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ListenerToClientWrappedMessage}
 */
proto.ListenerToClientWrappedMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ListenerToClientWrappedMessage;
  return proto.ListenerToClientWrappedMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ListenerToClientWrappedMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ListenerToClientWrappedMessage}
 */
proto.ListenerToClientWrappedMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.InvitationToPlayGame;
      reader.readMessage(value,proto.InvitationToPlayGame.deserializeBinaryFromReader);
      msg.setInvitationtoplay(value);
      break;
    case 2:
      var value = new proto.ListenerToClientGamesStates;
      reader.readMessage(value,proto.ListenerToClientGamesStates.deserializeBinaryFromReader);
      msg.setStates(value);
      break;
    case 3:
      var value = new proto.InvitationToViewGame;
      reader.readMessage(value,proto.InvitationToViewGame.deserializeBinaryFromReader);
      msg.setInvitationtoview(value);
      break;
    case 4:
      var value = new proto.ListenerToClientsWebRTCGamesStates;
      reader.readMessage(value,proto.ListenerToClientsWebRTCGamesStates.deserializeBinaryFromReader);
      msg.setRtcstates(value);
      break;
    case 5:
      var value = new proto.ListenerToClientsWebRTCRefuse;
      reader.readMessage(value,proto.ListenerToClientsWebRTCRefuse.deserializeBinaryFromReader);
      msg.setRtcrefuse(value);
      break;
    case 6:
      var value = new proto.RTCAdmin2ClientOffer;
      reader.readMessage(value,proto.RTCAdmin2ClientOffer.deserializeBinaryFromReader);
      msg.setRtcoffer(value);
      break;
    case 7:
      var value = new proto.RTCClient2AdminAnswer;
      reader.readMessage(value,proto.RTCClient2AdminAnswer.deserializeBinaryFromReader);
      msg.setRtcanswer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ListenerToClientWrappedMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ListenerToClientWrappedMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ListenerToClientWrappedMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListenerToClientWrappedMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInvitationtoplay();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.InvitationToPlayGame.serializeBinaryToWriter
    );
  }
  f = message.getStates();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ListenerToClientGamesStates.serializeBinaryToWriter
    );
  }
  f = message.getInvitationtoview();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.InvitationToViewGame.serializeBinaryToWriter
    );
  }
  f = message.getRtcstates();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ListenerToClientsWebRTCGamesStates.serializeBinaryToWriter
    );
  }
  f = message.getRtcrefuse();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ListenerToClientsWebRTCRefuse.serializeBinaryToWriter
    );
  }
  f = message.getRtcoffer();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.RTCAdmin2ClientOffer.serializeBinaryToWriter
    );
  }
  f = message.getRtcanswer();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.RTCClient2AdminAnswer.serializeBinaryToWriter
    );
  }
};


/**
 * optional InvitationToPlayGame invitationToPlay = 1;
 * @return {?proto.InvitationToPlayGame}
 */
proto.ListenerToClientWrappedMessage.prototype.getInvitationtoplay = function() {
  return /** @type{?proto.InvitationToPlayGame} */ (
    jspb.Message.getWrapperField(this, proto.InvitationToPlayGame, 1));
};


/** @param {?proto.InvitationToPlayGame|undefined} value */
proto.ListenerToClientWrappedMessage.prototype.setInvitationtoplay = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.ListenerToClientWrappedMessage.oneofGroups_[0], value);
};


proto.ListenerToClientWrappedMessage.prototype.clearInvitationtoplay = function() {
  this.setInvitationtoplay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ListenerToClientWrappedMessage.prototype.hasInvitationtoplay = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ListenerToClientGamesStates states = 2;
 * @return {?proto.ListenerToClientGamesStates}
 */
proto.ListenerToClientWrappedMessage.prototype.getStates = function() {
  return /** @type{?proto.ListenerToClientGamesStates} */ (
    jspb.Message.getWrapperField(this, proto.ListenerToClientGamesStates, 2));
};


/** @param {?proto.ListenerToClientGamesStates|undefined} value */
proto.ListenerToClientWrappedMessage.prototype.setStates = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.ListenerToClientWrappedMessage.oneofGroups_[0], value);
};


proto.ListenerToClientWrappedMessage.prototype.clearStates = function() {
  this.setStates(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ListenerToClientWrappedMessage.prototype.hasStates = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional InvitationToViewGame invitationToView = 3;
 * @return {?proto.InvitationToViewGame}
 */
proto.ListenerToClientWrappedMessage.prototype.getInvitationtoview = function() {
  return /** @type{?proto.InvitationToViewGame} */ (
    jspb.Message.getWrapperField(this, proto.InvitationToViewGame, 3));
};


/** @param {?proto.InvitationToViewGame|undefined} value */
proto.ListenerToClientWrappedMessage.prototype.setInvitationtoview = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.ListenerToClientWrappedMessage.oneofGroups_[0], value);
};


proto.ListenerToClientWrappedMessage.prototype.clearInvitationtoview = function() {
  this.setInvitationtoview(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ListenerToClientWrappedMessage.prototype.hasInvitationtoview = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ListenerToClientsWebRTCGamesStates rtcStates = 4;
 * @return {?proto.ListenerToClientsWebRTCGamesStates}
 */
proto.ListenerToClientWrappedMessage.prototype.getRtcstates = function() {
  return /** @type{?proto.ListenerToClientsWebRTCGamesStates} */ (
    jspb.Message.getWrapperField(this, proto.ListenerToClientsWebRTCGamesStates, 4));
};


/** @param {?proto.ListenerToClientsWebRTCGamesStates|undefined} value */
proto.ListenerToClientWrappedMessage.prototype.setRtcstates = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.ListenerToClientWrappedMessage.oneofGroups_[0], value);
};


proto.ListenerToClientWrappedMessage.prototype.clearRtcstates = function() {
  this.setRtcstates(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ListenerToClientWrappedMessage.prototype.hasRtcstates = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ListenerToClientsWebRTCRefuse rtcRefuse = 5;
 * @return {?proto.ListenerToClientsWebRTCRefuse}
 */
proto.ListenerToClientWrappedMessage.prototype.getRtcrefuse = function() {
  return /** @type{?proto.ListenerToClientsWebRTCRefuse} */ (
    jspb.Message.getWrapperField(this, proto.ListenerToClientsWebRTCRefuse, 5));
};


/** @param {?proto.ListenerToClientsWebRTCRefuse|undefined} value */
proto.ListenerToClientWrappedMessage.prototype.setRtcrefuse = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.ListenerToClientWrappedMessage.oneofGroups_[0], value);
};


proto.ListenerToClientWrappedMessage.prototype.clearRtcrefuse = function() {
  this.setRtcrefuse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ListenerToClientWrappedMessage.prototype.hasRtcrefuse = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional RTCAdmin2ClientOffer rtcOffer = 6;
 * @return {?proto.RTCAdmin2ClientOffer}
 */
proto.ListenerToClientWrappedMessage.prototype.getRtcoffer = function() {
  return /** @type{?proto.RTCAdmin2ClientOffer} */ (
    jspb.Message.getWrapperField(this, proto.RTCAdmin2ClientOffer, 6));
};


/** @param {?proto.RTCAdmin2ClientOffer|undefined} value */
proto.ListenerToClientWrappedMessage.prototype.setRtcoffer = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.ListenerToClientWrappedMessage.oneofGroups_[0], value);
};


proto.ListenerToClientWrappedMessage.prototype.clearRtcoffer = function() {
  this.setRtcoffer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ListenerToClientWrappedMessage.prototype.hasRtcoffer = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional RTCClient2AdminAnswer rtcAnswer = 7;
 * @return {?proto.RTCClient2AdminAnswer}
 */
proto.ListenerToClientWrappedMessage.prototype.getRtcanswer = function() {
  return /** @type{?proto.RTCClient2AdminAnswer} */ (
    jspb.Message.getWrapperField(this, proto.RTCClient2AdminAnswer, 7));
};


/** @param {?proto.RTCClient2AdminAnswer|undefined} value */
proto.ListenerToClientWrappedMessage.prototype.setRtcanswer = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.ListenerToClientWrappedMessage.oneofGroups_[0], value);
};


proto.ListenerToClientWrappedMessage.prototype.clearRtcanswer = function() {
  this.setRtcanswer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ListenerToClientWrappedMessage.prototype.hasRtcanswer = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServerWrappedMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ServerWrappedMessage.oneofGroups_);
};
goog.inherits(proto.ServerWrappedMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ServerWrappedMessage.displayName = 'proto.ServerWrappedMessage';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ServerWrappedMessage.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.ServerWrappedMessage.MessageCase = {
  MESSAGE_NOT_SET: 0,
  INVITATIONTOPLAY: 1,
  INVITATIONTOVIEW: 2
};

/**
 * @return {proto.ServerWrappedMessage.MessageCase}
 */
proto.ServerWrappedMessage.prototype.getMessageCase = function() {
  return /** @type {proto.ServerWrappedMessage.MessageCase} */(jspb.Message.computeOneofCase(this, proto.ServerWrappedMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServerWrappedMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.ServerWrappedMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServerWrappedMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerWrappedMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    invitationtoplay: (f = msg.getInvitationtoplay()) && proto.InvitationToPlayGame.toObject(includeInstance, f),
    invitationtoview: (f = msg.getInvitationtoview()) && proto.InvitationToViewGame.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServerWrappedMessage}
 */
proto.ServerWrappedMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServerWrappedMessage;
  return proto.ServerWrappedMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServerWrappedMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServerWrappedMessage}
 */
proto.ServerWrappedMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.InvitationToPlayGame;
      reader.readMessage(value,proto.InvitationToPlayGame.deserializeBinaryFromReader);
      msg.setInvitationtoplay(value);
      break;
    case 2:
      var value = new proto.InvitationToViewGame;
      reader.readMessage(value,proto.InvitationToViewGame.deserializeBinaryFromReader);
      msg.setInvitationtoview(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServerWrappedMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServerWrappedMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServerWrappedMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerWrappedMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInvitationtoplay();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.InvitationToPlayGame.serializeBinaryToWriter
    );
  }
  f = message.getInvitationtoview();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.InvitationToViewGame.serializeBinaryToWriter
    );
  }
};


/**
 * optional InvitationToPlayGame invitationToPlay = 1;
 * @return {?proto.InvitationToPlayGame}
 */
proto.ServerWrappedMessage.prototype.getInvitationtoplay = function() {
  return /** @type{?proto.InvitationToPlayGame} */ (
    jspb.Message.getWrapperField(this, proto.InvitationToPlayGame, 1));
};


/** @param {?proto.InvitationToPlayGame|undefined} value */
proto.ServerWrappedMessage.prototype.setInvitationtoplay = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.ServerWrappedMessage.oneofGroups_[0], value);
};


proto.ServerWrappedMessage.prototype.clearInvitationtoplay = function() {
  this.setInvitationtoplay(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ServerWrappedMessage.prototype.hasInvitationtoplay = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional InvitationToViewGame invitationToView = 2;
 * @return {?proto.InvitationToViewGame}
 */
proto.ServerWrappedMessage.prototype.getInvitationtoview = function() {
  return /** @type{?proto.InvitationToViewGame} */ (
    jspb.Message.getWrapperField(this, proto.InvitationToViewGame, 2));
};


/** @param {?proto.InvitationToViewGame|undefined} value */
proto.ServerWrappedMessage.prototype.setInvitationtoview = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.ServerWrappedMessage.oneofGroups_[0], value);
};


proto.ServerWrappedMessage.prototype.clearInvitationtoview = function() {
  this.setInvitationtoview(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ServerWrappedMessage.prototype.hasInvitationtoview = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.KeyboardKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.KeyboardKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.KeyboardKey.displayName = 'proto.KeyboardKey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.KeyboardKey.prototype.toObject = function(opt_includeInstance) {
  return proto.KeyboardKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.KeyboardKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.KeyboardKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyboardkey: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.KeyboardKey}
 */
proto.KeyboardKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.KeyboardKey;
  return proto.KeyboardKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.KeyboardKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.KeyboardKey}
 */
proto.KeyboardKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setKeyboardkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.KeyboardKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.KeyboardKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.KeyboardKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.KeyboardKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyboardkey();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 keyboardKey = 1;
 * @return {number}
 */
proto.KeyboardKey.prototype.getKeyboardkey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.KeyboardKey.prototype.setKeyboardkey = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Ping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Ping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Ping.displayName = 'proto.Ping';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Ping.prototype.toObject = function(opt_includeInstance) {
  return proto.Ping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Ping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Ping.toObject = function(includeInstance, msg) {
  var f, obj = {
    ping: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Ping}
 */
proto.Ping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Ping;
  return proto.Ping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Ping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Ping}
 */
proto.Ping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPing(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Ping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Ping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Ping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Ping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPing();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 ping = 1;
 * @return {number}
 */
proto.Ping.prototype.getPing = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Ping.prototype.setPing = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetQulon = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SetQulon, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SetQulon.displayName = 'proto.SetQulon';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetQulon.prototype.toObject = function(opt_includeInstance) {
  return proto.SetQulon.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetQulon} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetQulon.toObject = function(includeInstance, msg) {
  var f, obj = {
    qulon: +jspb.Message.getFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetQulon}
 */
proto.SetQulon.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetQulon;
  return proto.SetQulon.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetQulon} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetQulon}
 */
proto.SetQulon.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setQulon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetQulon.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetQulon.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetQulon} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetQulon.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQulon();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
};


/**
 * optional float qulon = 1;
 * @return {number}
 */
proto.SetQulon.prototype.getQulon = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.SetQulon.prototype.setQulon = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetLightVelocity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SetLightVelocity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SetLightVelocity.displayName = 'proto.SetLightVelocity';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetLightVelocity.prototype.toObject = function(opt_includeInstance) {
  return proto.SetLightVelocity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetLightVelocity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetLightVelocity.toObject = function(includeInstance, msg) {
  var f, obj = {
    lightvelocity: +jspb.Message.getFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetLightVelocity}
 */
proto.SetLightVelocity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetLightVelocity;
  return proto.SetLightVelocity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetLightVelocity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetLightVelocity}
 */
proto.SetLightVelocity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLightvelocity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetLightVelocity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetLightVelocity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetLightVelocity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetLightVelocity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLightvelocity();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
};


/**
 * optional float lightVelocity = 1;
 * @return {number}
 */
proto.SetLightVelocity.prototype.getLightvelocity = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.SetLightVelocity.prototype.setLightvelocity = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SetMagneticCalculated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SetMagneticCalculated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SetMagneticCalculated.displayName = 'proto.SetMagneticCalculated';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SetMagneticCalculated.prototype.toObject = function(opt_includeInstance) {
  return proto.SetMagneticCalculated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SetMagneticCalculated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetMagneticCalculated.toObject = function(includeInstance, msg) {
  var f, obj = {
    magneticcalculated: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SetMagneticCalculated}
 */
proto.SetMagneticCalculated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SetMagneticCalculated;
  return proto.SetMagneticCalculated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SetMagneticCalculated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SetMagneticCalculated}
 */
proto.SetMagneticCalculated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMagneticcalculated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SetMagneticCalculated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SetMagneticCalculated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SetMagneticCalculated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SetMagneticCalculated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMagneticcalculated();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool magneticCalculated = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.SetMagneticCalculated.prototype.getMagneticcalculated = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.SetMagneticCalculated.prototype.setMagneticcalculated = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ClientWrappedMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ClientWrappedMessage.oneofGroups_);
};
goog.inherits(proto.ClientWrappedMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ClientWrappedMessage.displayName = 'proto.ClientWrappedMessage';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ClientWrappedMessage.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.ClientWrappedMessage.MessageCase = {
  MESSAGE_NOT_SET: 0,
  KEY: 1,
  PING: 2,
  QULON: 3,
  LIGHTVELOCITY: 4,
  MAGNETICCALCULATED: 5
};

/**
 * @return {proto.ClientWrappedMessage.MessageCase}
 */
proto.ClientWrappedMessage.prototype.getMessageCase = function() {
  return /** @type {proto.ClientWrappedMessage.MessageCase} */(jspb.Message.computeOneofCase(this, proto.ClientWrappedMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ClientWrappedMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.ClientWrappedMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ClientWrappedMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientWrappedMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.KeyboardKey.toObject(includeInstance, f),
    ping: (f = msg.getPing()) && proto.Ping.toObject(includeInstance, f),
    qulon: (f = msg.getQulon()) && proto.SetQulon.toObject(includeInstance, f),
    lightvelocity: (f = msg.getLightvelocity()) && proto.SetLightVelocity.toObject(includeInstance, f),
    magneticcalculated: (f = msg.getMagneticcalculated()) && proto.SetMagneticCalculated.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ClientWrappedMessage}
 */
proto.ClientWrappedMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ClientWrappedMessage;
  return proto.ClientWrappedMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ClientWrappedMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ClientWrappedMessage}
 */
proto.ClientWrappedMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.KeyboardKey;
      reader.readMessage(value,proto.KeyboardKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.Ping;
      reader.readMessage(value,proto.Ping.deserializeBinaryFromReader);
      msg.setPing(value);
      break;
    case 3:
      var value = new proto.SetQulon;
      reader.readMessage(value,proto.SetQulon.deserializeBinaryFromReader);
      msg.setQulon(value);
      break;
    case 4:
      var value = new proto.SetLightVelocity;
      reader.readMessage(value,proto.SetLightVelocity.deserializeBinaryFromReader);
      msg.setLightvelocity(value);
      break;
    case 5:
      var value = new proto.SetMagneticCalculated;
      reader.readMessage(value,proto.SetMagneticCalculated.deserializeBinaryFromReader);
      msg.setMagneticcalculated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ClientWrappedMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ClientWrappedMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ClientWrappedMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ClientWrappedMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.KeyboardKey.serializeBinaryToWriter
    );
  }
  f = message.getPing();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Ping.serializeBinaryToWriter
    );
  }
  f = message.getQulon();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.SetQulon.serializeBinaryToWriter
    );
  }
  f = message.getLightvelocity();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.SetLightVelocity.serializeBinaryToWriter
    );
  }
  f = message.getMagneticcalculated();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.SetMagneticCalculated.serializeBinaryToWriter
    );
  }
};


/**
 * optional KeyboardKey key = 1;
 * @return {?proto.KeyboardKey}
 */
proto.ClientWrappedMessage.prototype.getKey = function() {
  return /** @type{?proto.KeyboardKey} */ (
    jspb.Message.getWrapperField(this, proto.KeyboardKey, 1));
};


/** @param {?proto.KeyboardKey|undefined} value */
proto.ClientWrappedMessage.prototype.setKey = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.ClientWrappedMessage.oneofGroups_[0], value);
};


proto.ClientWrappedMessage.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientWrappedMessage.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Ping ping = 2;
 * @return {?proto.Ping}
 */
proto.ClientWrappedMessage.prototype.getPing = function() {
  return /** @type{?proto.Ping} */ (
    jspb.Message.getWrapperField(this, proto.Ping, 2));
};


/** @param {?proto.Ping|undefined} value */
proto.ClientWrappedMessage.prototype.setPing = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.ClientWrappedMessage.oneofGroups_[0], value);
};


proto.ClientWrappedMessage.prototype.clearPing = function() {
  this.setPing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientWrappedMessage.prototype.hasPing = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SetQulon qulon = 3;
 * @return {?proto.SetQulon}
 */
proto.ClientWrappedMessage.prototype.getQulon = function() {
  return /** @type{?proto.SetQulon} */ (
    jspb.Message.getWrapperField(this, proto.SetQulon, 3));
};


/** @param {?proto.SetQulon|undefined} value */
proto.ClientWrappedMessage.prototype.setQulon = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.ClientWrappedMessage.oneofGroups_[0], value);
};


proto.ClientWrappedMessage.prototype.clearQulon = function() {
  this.setQulon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientWrappedMessage.prototype.hasQulon = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SetLightVelocity lightVelocity = 4;
 * @return {?proto.SetLightVelocity}
 */
proto.ClientWrappedMessage.prototype.getLightvelocity = function() {
  return /** @type{?proto.SetLightVelocity} */ (
    jspb.Message.getWrapperField(this, proto.SetLightVelocity, 4));
};


/** @param {?proto.SetLightVelocity|undefined} value */
proto.ClientWrappedMessage.prototype.setLightvelocity = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.ClientWrappedMessage.oneofGroups_[0], value);
};


proto.ClientWrappedMessage.prototype.clearLightvelocity = function() {
  this.setLightvelocity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientWrappedMessage.prototype.hasLightvelocity = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional SetMagneticCalculated magneticCalculated = 5;
 * @return {?proto.SetMagneticCalculated}
 */
proto.ClientWrappedMessage.prototype.getMagneticcalculated = function() {
  return /** @type{?proto.SetMagneticCalculated} */ (
    jspb.Message.getWrapperField(this, proto.SetMagneticCalculated, 5));
};


/** @param {?proto.SetMagneticCalculated|undefined} value */
proto.ClientWrappedMessage.prototype.setMagneticcalculated = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.ClientWrappedMessage.oneofGroups_[0], value);
};


proto.ClientWrappedMessage.prototype.clearMagneticcalculated = function() {
  this.setMagneticcalculated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ClientWrappedMessage.prototype.hasMagneticcalculated = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * @enum {number}
 */
proto.ShowPaletteType = {
  SPTDISCRETE: 0,
  SPTCONTINUOUS: 1
};

/**
 * @enum {number}
 */
proto.WebRTCPlayerStatus = {
  RTCPLAYERNONE: 0,
  RTCPLAYERADMIN: 1,
  RTCPLAYERCLIENT: 2
};

/**
 * @enum {number}
 */
proto.WebRTCGameRefuseReasons = {
  RTCREFUSENOGAMEWITHID: 0,
  RTCREFUSEROOMISFULL: 1
};

